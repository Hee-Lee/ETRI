CREATE TABLE TEMP00
AS
SELECT * FROM TEMP;
--
ALTER TABLE TEMP00
DROP (LEV);
--
DROP TABLE TEMP00;
--
CREATE TABLE TEMP1 AS
SELECT * FROM TEMP;
--SCOTT에서 작업한거-------------------------------------------------------------------------
CREATE VIEW EMP_20
AS
SELECT * FROM EMP
WHERE DEPTNO = 20;
--
SELECT * FROM EMP_20;

SELECT EMPNO, ENAME, DEPTNO
FROM EMP_20;

DESC EMP_20;
--
CREATE OR REPLACE VIEW EMP_20
AS
SELECT * FROM EMP
WHERE DEPTNO = 30;
--복합뷰
CREATE VIEW DEPT_SUM(NAME, MINISAL, MAXSAL, AVGSAL)
AS
SELECT D.DNAME, MIN(E.SAL), MAX(E.SAL), AVG(E.SAL)
FROM DEPT D, EMP E
WHERE D.DEPTNO = E.DEPTNO
GROUP BY D.DNAME;

SELECT * FROM DEPT_SUM;
--WITH CHECK OPTION
CREATE OR REPLACE VIEW EMP_20
AS
SELECT * FROM EMP
WHERE DEPTNO = 20
WITH CHECK OPTION CONSTRAINT EMP_20_CK;
--에러
UPDATE EMP_20
SET DEPTNO = 30
WHERE EMPNO = 7566;
--
CREATE OR REPLACE VIEW EMP_20
AS
SELECT * FROM EMP
WHERE DEPTNO = 20;
--WITH READ ONLY 
CREATE OR REPLACE VIEW EMP_10
AS
SELECT * FROM EMP
WHERE DEPTNO = 10
WITH READ ONLY;
--뷰 제거
DROP VIEW EMP_10;
--인라인 뷰
SELECT A.LAST_NAME, A.SALARY, A.DEPARTMENT_ID, B.MAXSAL
FROM EMPLOYEES A, (SELECT DEPARTMENT_ID, MAX(SALARY) MAXSAL
                    FROM EMPLOYEES
                    GROUP BY DEPARTMENT_ID) B
WHERE A.DEPARTMENT_ID = B.DEPARTMENT_ID
AND A.SALARY < B.MAXSAL;
--
SELECT ROWNUM AS RANK, LAST_NAME, SALARY
FROM (SELECT LAST_NAME, SALARY
        FROM EMPLOYEES
        ORDER BY SALARY DESC)
WHERE ROWNUM <= 3;
-----------------------------------------------------------------------------
--1.TEMP1에서 직급이 '과장'인 사람의 모든 정보를 보여주는 VIEW 작성(VEMP1)
CREATE VIEW VEMP1
AS
SELECT * FROM TEMP1
WHERE LEV = '과장';

SELECT * FROM TEMP1;
--2.TEMP1에서 모든 직원의 정보를 보여주되 생년월일, SALARY, 전화번호, 평가여부, 직급, 채용형태등
-- 민감한 정보는 보이지 않길 바랍니다. 이들을 제외한 나머지 정보만 볼 수 있도록 VEMP2 VEIW 생성
CREATE VIEW VEMP2
AS
SELECT EMP_ID, EMP_NAME, DEPT_CODE, USE_YN, HOBBY
FROM TEMP1;
--3.2번 동일한 정보를 보여주는 VEMP3 VIEW를 만들되 컬럼명이 한글로 사번, 성명,부서코드, 근무여부, 취미
--  이라고 나오도록 VIEW
CREATE VIEW VEMP3
AS
SELECT EMP_ID 사번, EMP_NAME 성명, DEPT_CODE 부서코드, USE_YN 근무여부, HOBBY 취미
FROM TEMP1;
--4.VEMP3에서 취미가 농구인사람 검색하는 쿼리 작성
SELECT * FROM VEMP3
WHERE 취미 = '농구';
--5.USER_VIEWS를 통해 현재까지 생성한 VIEW 목록 확인
SELECT * FROM USER_VIEWS;
--6.사번, 성명, 부서코드, 부서명, 사용여부, 급여, 커미션, 나이, 직급나이하한, 직급나이상한을 볼 수 있는
--  VEMP4 VIEW를 만들되 TEMP1에 있는 모든 사원이 한명도 빠지지 않고 나올 수 있어야 합니다.
CREATE OR REPLACE VIEW VEMP4(사번,성명,부서코드,부서명,사용여부,급여,커미션,나이,직급나이하한,직급나이상한)
AS
SELECT A.EMP_ID,A.EMP_NAME,A.DEPT_CODE, D.DEPT_NAME, A.USE_YN,A.SALARY, B.COMM,
       ROUND((SYSDATE-BIRTH_DATE)/365,0) AGE,C.FROM_AGE,C.TO_AGE
FROM TEMP A,TCOM B, EMP_LEVEL C, TDEPT D
WHERE A.DEPT_CODE = D.DEPT_CODE
AND A.LEV = C.LEV(+)
AND B.EMP_ID(+) = A.EMP_ID
AND B.WORK_YEAR(+) = '2019';

--1. 부서코드,부서명, 최고SALARY를 받는 사번, 최고SALARY, 최소SALARY를 받는 사번, 최소SALARY 를 보여주는 VEMP5 VIEW를 만듭니다. 
--방법 1 단점이 하나밖에 안나옴
SELECT DEPT_CODE, FLOOR(MX), (MX-FLOOR(MX))*POWER(10,8), FLOOR(MN), (MN-FLOOR(MN))*POWER(10,8)
FROM(
        SELECT DEPT_CODE, MAX(SALARY + EMP_ID/POWER(10,8)) MX, MIN(SALARY + EMP_ID/POWER(10,8)) MN
        FROM TEMP1
        GROUP BY DEPT_CODE);
--서브쿼리를 쓰는 방법
SELECT T1.DEPT_CODE, T1.EMP_ID MXEMP, T1.SALARY MXSAL, T2.EMP_ID MNEMP, T2.SALARY MNSAL
FROM (
    SELECT DEPT_CODE, EMP_ID, SALARY
    FROM TEMP1 A
    WHERE (DEPT_CODE, SALARY) IN (SELECT DEPT_CODE, MAX(SALARY)
                                    FROM TEMP1 B
                                    WHERE B.DEPT_CODE = A.DEPT_CODE
                                    GROUP BY DEPT_CODE)
    ) T1,
    (
    SELECT DEPT_CODE, EMP_ID, SALARY
    FROM TEMP1 A
    WHERE (DEPT_CODE, SALARY) IN (SELECT DEPT_CODE, MIN(SALARY)
                                    FROM TEMP1 B
                                    WHERE B.DEPT_CODE = A.DEPT_CODE
                                    GROUP BY DEPT_CODE)
    ) T2
WHERE T1.DEPT_CODE = T2.DEPT_CODE
ORDER BY 1;
--2. TEMP1 EMP_ID 에 ALTER TABLE 명령으로 RPRIMARY KEY 생성
ALTER TABLE TEMP1
ADD CONSTRAINT TEMP1_PK PRIMARY KEY (EMP_ID);
--3. VEMP1에 ‘차장’ INSERT 문장 1개 수행 후 TEMP1에 실제 INSERT 되었는지 확인 후 ROLLBACK;
INSERT INTO VEMP1
VALUES (999999,'가나다','73-03-22','AB0001','정규','Y','120302301','SS','3942912','차장','Y');
SELECT * FROM VEMP1;
DESC VEMP1;
SELECT * FROM TEMP1;
ROLLBACK;
--4. VEMP2에 있는 컬럼은 모두 값 부여하여 VEMP2를 이용한 INSERT 후 TEMP1 확인 후 ROLLBACK;
SELECT * FROM VEMP2;
INSERT INTO VEMP2
VALUES (21313,'가나다','AA0001','Y','GG');
SELECT * FROM TEMP1;
ROLLBACK;
--5. 4번에 SALARY 추가하여 INSERT 문장 작성 후 실행하여 오류 확인 
INSERT INTO VEMP2
VALUES (21313,'가나다','AA0001','Y','GG','D');
--6. VEMP3를 통한 INSERT 수행 성공여부 확인 후 ROLLBACK;
INSERT INTO VEMP3
VALUES (782312,'홍길딩','AA0001','Y','R');
SELECT * FROM VEMP3;
SELECT * FROM TEMP1;
ROLLBACK;
--7. 권한관리 모델에서 롤, 롤별 부여받은 권한수, 롤이 부여된 유저수 VPRIV3 VIEW
SELECT A.ROLE_CD, COUNT(DISTINCT B.PRIV_ID), COUNT(DISTINCT C.USER_NM)
FROM ORCL.TROLE A, ORCL.TROL_PRIV B, ORCL.TROL_USER C
WHERE A.ROLE_CD = C.ROLE_CD(+)
AND A.ROLE_CD = B.ROLE_CD(+)
GROUP BY A.ROLE_CD
ORDER BY A.ROLE_CD;
--8. GRANT 결과에서 
--    롤, 롤별 부여받은 권한수, 롤이부여된 유저수 : VPRIV4 VIEW --ORCL에서 실행
SELECT DISTINCT B.ROLE_CD, COUNT(DISTINCT OBJ_NM || B.CRUD_CD), COUNT(DISTINCT A.USER_NM)
FROM
    (SELECT GRANTEE USER_NM, GRANTED_ROLE ROLE_CD
    FROM DBA_ROLE_PRIVS
    WHERE GRANTEE <> 'STUDY01') A,
    (SELECT ROLE ROLE_CD, TABLE_NAME OBJ_NM, PRIVILEGE CRUD_CD
    FROM ROLE_TAB_PRIVS
    WHERE OWNER = 'STUDY01') B
WHERE A.ROLE_CD = B.ROLE_CD
GROUP BY B.ROLE_CD
ORDER BY 1;
--9. 권한관리 모델의 롤별, 부여받은권한 수, 부여한 유저수, 
--    GRANT롤, GRANT받은 권한수(테이블+권한), GRANT한 유저수를 보여주는 VPRIV5 VIEW 생성
--7번 8번 조인하면되요!!
--1. TEMP와 TDEPT를 조인하여 TEMP의 사번, 성명, 부서코드 ,사용여부와
--  TDEPT의 부서명을 가져오는 VEMP6 VIEW 만들기
SELECT A.EMP_ID, A.EMP_NAME, A.DEPT_CODE, A.USE_YN
FROM TEMP A, TDEPT B
WHERE A.DEPT_CODE = B.DEPT_CODE;
--2. VEMP6를 통한 INSERT 성공 확인 후 입력건 DELETE 후 확인 ROLLBACK;
INSERT INTO VEMP6
VALUES();
--3. VEMP1 을 통한 차장 직급 전부 삭제 후 성공여부 확인 및 ROLLBACK;
DELETE VEMP1
WHERE LEV = '차장';
--4. VEMP1을 WITH CHECK OPTION 으로 REPLACE
CREATE OR REPLACE VIEW(
WITH CHECK OPTION CONSTRAINT = EE); 
--5.VEMP1을 통해 차장 직급으로 1명 INSERT 수행 및 성공여부 확인
INSERT INRO VEMP1
VALUES();