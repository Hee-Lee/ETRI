INSERT INTO DEPARTMENTS (DEPARTMENT_ID, DEPARTMENT_NAME,  )
VALUES (130,'FinanceDSA');

DESC DEPARTMENTS;

SELECT * FROM EMPLOYEES;
DESC EMPLOYEES;

INSERT INTO SALES_REPS
SELECT EMPLOYEE_ID, LAST_NAME, SALARY, COMMISSION_PCT
FROM EMPLOYEES;

CREATE TABLE SALES_REPS AS
SELECT EMPLOYEE_ID ID,
        LAST_NAME NAME,
        SALARY,
        COMMISSION_PCT
FROM EMPLOYEES
WHERE ROWNUM < 1;
--
SELECT *
FROM EMPLOYEES
WHERE EMPLOYEE_ID = 100;

UPDATE EMPLOYEES
SET DEPARTMENT_ID = 80
WHERE EMPLOYEE_ID = 100;
--서브쿼리를 사용한 UPDATE
UPDATE EMPLOYEES
SET     JOB_ID = (SELECT JOB_ID
                FROM EMPLOYEES
                WHERE EMPLOYEE_ID = 102),
        DEPARTMENT_ID = (SELECT DEPARTMENT_ID
                        FROM EMPLOYEES
                        WHERE EMPLOYEE_ID = 102)
WHERE EMPLOYEE_ID = 101;

ROLLBACK;
--다른 데이블의 값을 기반으로 UPDATE
CREATE TABLE EMP_COPY
AS
SELECT *
FROM EMPLOYEES;

SELECT * FROM EMP_COPY;

UPDATE EMP_COPY
SET     JOB_ID = (SELECT JOB_ID
                FROM EMPLOYEES
                WHERE EMPLOYEE_ID = 103),
        DEPARTMENT_ID = (SELECT DEPARTMENT_ID
                        FROM EMPLOYEES
                        WHERE EMPLOYEE_ID = 103)
WHERE EMPLOYEE_ID = 101;

ROLLBACK;
--무결성 제약조건 에러
UPDATE EMPLOYEES
SET DEPARTMENT_ID = 55
WHERE DEPARTMENT_ID = 100;
--DELETE문 WHERE절을 작성하지 않으면 테이블 전체 행이 삭제
DELETE
FROM EMP_COPY
WHERE EMPLOYEE_ID = 100;

SELECT *
FROM EMP_COPY
WHERE EMPLOYEE_ID = 100;

ROLLBACK;
--다른 테이블의 값을 기반으로 DELETE
DELETE
FROM EMP_COPY
WHERE DEPARTMENT_ID = (SELECT DEPARTMENT_ID
                        FROM DEPARTMENTS
                        WHERE DEPARTMENT_NAME LIKE '%Finance%');
ROLLBACK;
--무결성 제약조건 에러
DELETE
FROM DEPARTMENTS
WHERE DEPARTMENT_ID = 60;
--EMP_COPY랑 EMPLOYEES랑 데이터 다르게 만듬
SELECT * FROM EMP_COPY;
DELETE 
FROM EMP_COPY
WHERE DEPARTMENT_ID = 50;
COMMIT;
--MERGE --EMPLOYEES의 정보를 사용해서 ON으로 조인한 후 매치가되면 UPDATE, 매치가 안되면 INSERT
MERGE INTO EMP_COPY C
        USING EMPLOYEES E
        ON (C.EMPLOYEE_ID = E.EMPLOYEE_ID)
        WHEN MATCHED THEN
            UPDATE SET
            C.FIRST_NAME = '바보',
            C.LAST_NAME = E.LAST_NAME,
            C.EMAIL = E.EMAIL,
            C.PHONE_NUMBER = E.PHONE_NUMBER,
            C.HIRE_DATE = E.HIRE_DATE,
            C.JOB_ID = E.JOB_ID,
            C.SALARY = E.SALARY,
            C.COMMISSION_PCT = E.COMMISSION_PCT,
            C.MANAGER_ID = E.MANAGER_ID,
            C.DEPARTMENT_ID = E.DEPARTMENT_ID
        WHEN NOT MATCHED THEN
            INSERT
            VALUES (E.EMPLOYEE_ID, E.FIRST_NAME,E.LAST_NAME,E.EMAIL,E.PHONE_NUMBER,E.HIRE_DATE,E.JOB_ID,E.SALARY,E.COMMISSION_PCT,E.MANAGER_ID,E.DEPARTMENT_ID);
ROLLBACK;
SELECT * FROM EMPLOYEES;
--테이블 생성
CREATE TABLE TMCD(
    MCD VARCHAR2(4) NOT NULL PRIMARY KEY,
    MNM VARCHAR2(200), 
    PMK VARCHAR2(400)
    );

CREATE TABLE TCODE (
    KNO NUMBER NOT NULL PRIMARY KEY,
    MCD VARCHAR2(4),
    DCD VARCHAR2(4),
    DNM VARCHAR2(100),
    DRM VARCHAR2(400)
);
ALTER TABLE TCODE
ADD CONSTRAINT FK_FROM_TMCD FOREIGN KEY (MCD) REFERENCES TMCD(MCD);
--1.TMCD 테이블에 메인 코드 입력하기
INSERT INTO TMCD
VALUES ('A001','평가결과등급코드','');
INSERT INTO TMCD
VALUES ('A002','평가항목코드','');
--2.TCODE 테이블에 코드 삽입하기
INSERT INTO TCODE
VALUES (101,'A001','A','A등급','90점 이상');
INSERT INTO TCODE
VALUES (102,'A001','B','B등급','80점 이상');
INSERT INTO TCODE
VALUES (103,'A001','C','C등급','70점 이상');
INSERT INTO TCODE
VALUES (104,'A001','D','D등급','60점 이상');
INSERT INTO TCODE
VALUES (105,'A001','F','F등급','60점 미만');
INSERT INTO TCODE
VALUES (111,'A002','0001','업적','업무업적을 평가하는 항목');
INSERT INTO TCODE
VALUES (112,'A002','0002','자기계발','직무관련 자기계발 실적을 평가하는 항목');
INSERT INTO TCODE
VALUES (113,'A002','0003','협업','동료에게 도움된 정도를 평가하는 항목');
INSERT INTO TCODE
VALUES (114,'A002','0004','태도','근태, 약속이행 등 업무를 수행하는 전반적인 태도를 평가하는 항목');
--1. TEMP테이블에 NOT NULL인 컬럼만 선택적으로 INSERT 문장작성 성공여부 확인 후 ROLLBACK
SELECT EMP_ID, EMP_NAME, DEPT_CODE, USE_YN
FROM TEMP;

SELECT * FROM TEMP;
DESC TEMP;
--2. TEMP와 동일 구조 테이블 만들고 TEMP에서 SELECT 한 결과 INSERT
CREATE TABLE TEMP_COPY(
EMP_ID     NUMBER NOT NULL PRIMARY KEY,  
EMP_NAME   VARCHAR2(20) NOT NULL, 
BIRTH_DATE DATE,         
DEPT_CODE   VARCHAR2(6) NOT NULL,  
EMP_TYPE    VARCHAR2(12), 
USE_YN      VARCHAR2(1) NOT NULL,  
TEL         VARCHAR2(15), 
HOBBY       VARCHAR2(30), 
SALARY      NUMBER      , 
LEV         VARCHAR2(10)
);

INSERT INTO TEMP_COPY
SELECT * FROM TEMP;
--과제 1. 연흥부의 전화번호는 DBA_OBJECTS의 ROW수로, SALARY는 현재 직급의 상한치로 변경 성공여부 확인후 COMMIT
SELECT * FROM TEMP_COPY;
SELECT *
FROM TEMP_COPY
WHERE EMP_NAME = '연흥부';


UPDATE TEMP_COPY
SET TEL = (SELECT COUNT(*)
            FROM DBA_OBJECTS),
    SALARY = (SELECT TO_SAL 
                FROM EMP_LEVEL
                WHERE LEV = (SELECT LEV
                                FROM TEMP_COPY
                                WHERE EMP_NAME = '연흥부'))
WHERE EMP_NAME = '연흥부';
--2. TEMP의 DEPT_CODE에서 TDEPT의 DEPT_CODE를 참조하는 FOREIGN KEY 생성
--TEMP 의 FK검색
SELECT CONSTRAINT_NAME
FROM USER_CONSTRAINTS
WHERE TABLE_NAME = 'TEMP'
AND CONSTRAINT_TYPE = 'R';
--FK 삭제
ALTER TABLE TEMP DROP CONSTRAINT DEPT_R;
--FK 생성
ALTER TABLE TEMP
ADD CONSTRAINT FK_FROM_TDEPT FOREIGN KEY (DEPT_CODE)  REFERENCES TDEPT(DEPT_CODE);
--3. EMP_ID = 19970112 사번의 DEPT_CODE 를 부서코드에 존재하지 않는 코드로 변경
--   (무결성 에러확인)
UPDATE TEMP
SET DEPT_CODE = '없음'
WHERE EMP_ID = 19970112;
--4. TEMP 에서 EMP_ID = 19970112 사번 삭제
--     삭제 여부 확인 후  ROLLBACK;
DELETE
FROM TEMP
WHERE EMP_ID = 19970112;
ROLLBACK;
--5.  부서위치가 인천인 부서에 속하는 직원 삭제
--     삭제 여부 확인 후  ROLLBACK;
DELETE
FROM TEMP
WHERE DEPT_CODE IN (SELECT DEPT_CODE
                    FROM TDEPT
                    WHERE AREA = '인천');
ROLLBACK;
--6. 부서테이블에서 부서코드가 ‘AA0001’ 인 부서 삭제 (에러확인)
DELETE
FROM TDEPT
WHERE DEPT_CODE = 'AA0001';
--7. TEMP 와 동일한 테이블을 TEMP에서 부서코드가 ‘AA0001’ 인 경우만 SELECT 해서
--  CREATE. 다시 TEMP 전 ROW를 새로 만든 테이블에 없으면 INSERT 있으면 SALARY를 반으로
CREATE TABLE TEMP_COPY2
AS
SELECT *
FROM TEMP
WHERE DEPT_CODE =  'AA0001';

SELECT * FROM TEMP_COPY2;

MERGE INTO TEMP_COPY2 A
    USING TEMP B
    ON (A.EMP_ID = B.EMP_ID)
    WHEN MATCHED THEN 
        UPDATE SET 
        A.EMP_NAME = B.EMP_NAME,
        A.BIRTH_DATE = B.BIRTH_DATE,
        A.DEPT_CODE = B.DEPT_CODE,
        A.EMP_TYPE = B.EMP_TYPE,
        A.USE_YN = B.USE_YN,
        A.TEL = B.TEL,
        A.HOBBY = B.HOBBY,
        A.SALARY = B.SALARY/2,
        A.LEV = B.LEV
    WHEN NOT MATCHED THEN
        INSERT
        VALUES (B.EMP_ID, B.EMP_NAME, B.BIRTH_DATE, B.DEPT_CODE, B.EMP_TYPE,
                B.USE_YN, B.TEL, B.HOBBY, B.SALARY, B.LEV);
                
SELECT * FROM TEMP_COPY2;
ROLLBACK;

--평가 테이블 만들기
CREATE TABLE TEVAL(
        YM_EV VARCHAR2(06) NOT NULL,
        EMP_ID NUMBER NOT NULL,
        EV_CD NUMBER NOT NULL,
        EV_RES VARCHAR2(1),
        EV_EMP NUMBER,
        CONSTRAINT TEVAL_PK PRIMARY KEY (YM_EV, EMP_ID, EV_CD),
        CONSTRAINT TEVAL_FROM_TEMP1 FOREIGN KEY (EMP_ID) REFERENCES TEMP(EMP_ID),
        CONSTRAINT TEVAL_FROM_TEMP2 FOREIGN KEY (EV_EMP) REFERENCES TEMP(EMP_ID),
        CONSTRAINT TEVAL_FROM_TCODE FOREIGN KEY (EV_CD) REFERENCES TCODE(KNO)
);


SELECT * FROM TEVAL;
SELECT * FROM TCODE;
SELECT * FROM TMCD;

--평가년월 피평가자 평가항목 평가등급 평가자
INSERT INTO TEVAL (YM_EV, EMP_ID, EV_CD)
(SELECT '2019'||DECODE(D.NO, 1, '06', 2, '12'),A.EMP_ID, B.KNO
FROM TEMP A, TCODE B, EMP_LEVEL C, T1_DATA D
WHERE MCD = 'A002'
AND A.LEV = C.LEV
AND D.NO <= 2);
COMMIT;
--평가자 -> 속한부서 부서장 <-TEMP BOSS_ID 업데이트
UPDATE TEVAL T
SET EV_EMP = (SELECT BOSS_ID
                FROM TEMP A, TDEPT B 
                WHERE A.DEPT_CODE = B.DEPT_CODE 
                AND A.EMP_ID = T.EMP_ID)
WHERE YM_EV = '201901';
SELECT * FROM TEVAL;

INSERT INTO TEVAL (YM_EV, EMP_ID, EV_CD)
SELECT '2019'||'01',A.EMP_ID, B.KNO
FROM TEMP A, TCODE B
WHERE B.MCD = 'A002';

ALTER TABLE TEMP
ADD (EVAL_YN VARCHAR(01));
--8. 2019년 6월 평가 자료를 읽어 평가대상자로 등록된 경우만 직원테이블 EVAL_YN을 
--   Y로 변경 아니면 N 로 변경  후 COMMIT
SELECT EMP_ID
FROM TEVAL 
WHERE YM_EV = '201906';

UPDATE TEMP T
SET EVAL_YN = (SELECT DECODE(COUNT(*),0,'N','Y') 
                FROM TEVAL B
                WHERE YM_EV = '201906'
                AND T.EMP_ID = B.EMP_ID);
--보너스
--1.평가정보에서 2019년 01월 자료 중 사원정보의 EVAL_YN 이 'N' 인 경우에 해당되면
-- 해당 건 삭제하기 위해 대상 정보를 SELECT 하는 문장 작성
SELECT DISTINCT A.EMP_ID
FROM TEMP A, TEVAL B
WHERE B.YM_EV = '201901' AND A.EVAL_YN = 'N';
--2.TEMP에서 취미가 NULL 인 경우만 TEMP1에 CREATE TABLE TEMP1... SELECT..로
CREATE TABLE TEMP1
AS
SELECT *
FROM TEMP
WHERE HOBBY IS NULL;
--3.TEMP 자료 중 TEMP1에 있는 자료는 EVAL_YN 을 'Y'로 변경하고 없는 자료는
-- TEMP 자료를 그대로 INSERT
MERGE INTO TEMP1 A
    USING TEMP B
    ON (A.EVAL_YN = B.EVAL_YN)
    WHEN MATCHED THEN
        UPDATE SET
        A.EMP_ID = B.EMP_ID,
        A.EMP_NAME = B.EMP_NAME,
        A.BIRTH_DATE = B.BIRTH_DATE,
        A.DEPT_CODE = B.DEPT_CODE,
        A.EMP_TYPE = B.EMP_TYPE,
        A.USE_YN = B.USE_YN,
        A.TEL = B.TEL,
        A.HOBBY = B.HOBBY,
        A.SALARY = B.SALARY,
        A.LEV = B.LEV,
        A.EVAL_YN = 'Y'
    WHEN NOT MATCHED THEN
        INSERT
        VALUES(B.EMP_ID,B.EMP_NAME,B.BIRTH_DATE,B.DEPT_CODE,B.EMP_TYPE,B.USE_YN, B.TEL, B.HOBBY,B.SALARY,B.LEV,B.EVAL_YN);
ROLLBACK;
--4.평가 결과 변경
--2018년 01월 평가 결과 변경은 다음과 같은
--업적 : 전화번호가 '-'와 SPACE를 제외하고 10자리 이상은 A,
--     8~9자리 B, 7자리 C, 6자리 D, 그 나머지 F
--자기계발: 취미가 독서이면 A, 야구이면 B, 나머시 C
--협업 : 소속부서 근무지가 인천A, 서울B, 본사 C
--태도 : 모두 B

