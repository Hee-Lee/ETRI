2조 최재원


4.

//1)
var normal = "original"; // 일반 변수
var ref = { data: "original" }; // 참조형 변수

function test() {
  let a = normal; // normal변수의 값이 a에 저장
  a = "changed"; // a의 값 조작
  let b = ref; // ref객체의 위치가 b에 저장
  b.data = "changed" //b가 가리키는 위치에 있는 ref.data 조작
}

test();
console.log("normal: " + normal); // original
console.log("ref: " + ref.data); // changed

/*
일반형 변수는 그 값을 새로운 변수에 할당하면, 새로운 변수는 독립적인 위치와 값을 갖지만
참조형 변수값을 새로운 변수에 할당시에는 새로운 변수와 원래의 변수가 같은 위치를 갖고 있어
양 쪽 모두에서 동일한 데이터에 대한 조작을 하게 된다.
*/

//2)
var ref1 = { data: "original" };
var ref2 = ref; // ref2에 참조형 변수 복사
ref1.data = "changed"; // ref1 조작
console.log("ref1: " + ref1.data); // changed
console.log("ref2: " + ref2.data); // changed

var ref3 = { data: "original" };
var ref4 = ref3; // ref4에 참조형 변수 복사
ref3 = { data: "changed" }; // ref3 재정의(ref3에 새로운 참조값 매핑)
console.log("ref3: " + ref3.data); // changed
console.log("ref4: " + ref4.data); // original

/*
ref2의 경우 ref1과 동일한 위치에 대한 참조를 하고 있어
ref1을 통해 데이터를 조작하면 ref2를 통한 데이터 접근에서도 같은 변화가 일어난다.

ref4의 경우 ref3과 동일한 위치에 대한 참조를 하다가
ref3을 재정의 하면서 ref3은 새로운 위치에 대한 참조를 하기 때문에,
ref3과 ref4의 참조 위치는 서로 다른 상태가 된다.

따라서, ref3를 통한 데이터 조작시 ref4를 통해 그 변화를 확인할 수 없다.
*/



5.

//1)
function mySlice(str, start_i, end_i) {
  let l = str.length; // 문자열 길이(end_i가 길이 이상이더라도 길이 이상의 루프 회피 위함)
  if (start_i < 0) { start_i = 0 } // start_i가 음수일 때 예외처리
  if (typeof str != 'string') { // 에러반환: 스트링 아닐 때
    throw new Error("mySlice(str, start_i, end_i): str is now a string");
  } else if (start_i > end_i) { // 에러반환: end_i가 더 작을때
    throw new Error("mySlice(str, start_i, end_i): end_i cannot be bigger than start_i");
  } else { // 정상동작
    let result = "";
    for (let i = start_i; i < end_i && i < l; i++) {
      result += str[i];
    }
    return result;
  }
}

//2)
function myReplace(str, toFind, toReplace) {
  let result = "";
  if (typeof str != 'string') { // 에러반환: 스트링 아닐 때
    throw new Error("myReplace(str, toFind, toReplace): str is now a string");
  } else if(toFind.length != 1 || toReplace.length != 1) {
    throw new Error("myReplace(str, toFind, toReplace): toFind, toReplace shoud be one charactor")
  } else {
    for (i in str) {
      if (str[i] == toFind) { // 문자 찾기
        result += toReplace; // 치환문자 삽입
      } else {
        result += str[i]; // 원래문자 삽입
      }
    }
    return result;
  }
}




6.

// 1)
// from test1-05.js
function mySlice(str, start_i, end_i) {
  let l = str.length; // 문자열 길이(end_i가 길이 이상이더라도 길이 이상의 루프 회피 위함)
  if (start_i < 0) { start_i = 0 } // start_i가 음수일 때 예외처리
  if (typeof str != 'string') { // 에러반환: 스트링 아닐 때
    throw new Error("mySlice(str, start_i, end_i): str is now a string");
  } else if (start_i > end_i) { // 에러반환: end_i가 더 작을때
    throw new Error("mySlice(str, start_i, end_i): end_i cannot be bigger than start_i");
  } else { // 정상동작
    let result = "";
    for (let i = start_i; i < end_i && i < l; i++) {
      result += str[i];
    }
    return result;
  }
}
function myReplace(str, toFind, toReplace) {
  let result = "";
  if (typeof str != 'string') { // 에러반환: 스트링 아닐 때
    throw new Error("myReplace(str, toFind, toReplace): str is now a string");
  } else if(toFind.length != 1 || toReplace.length != 1) {
    throw new Error("myReplace(str, toFind, toReplace): toFind, toReplace shoud be one charactor")
  } else {
    for (i in str) {
      if (str[i] == toFind) { // 문자 찾기
        result += toReplace; // 치환문자 삽입
      } else {
        result += str[i]; // 원래문자 삽입
      }
    }
    return result;
  }
}

var strFunc = [mySlice, myReplace];
var iStr = "ABCDABCDABCD";

console.log(
  strFunc[1](
      strFunc[0](iStr, 0, 8), //  자른 문자를 치환 함수 인수로
      "C",
      " "
  )
)

// 2)
var mainObj = {
  subObj1: {
    data: "hello"
  },
  subObj2: {
    data: "hi"
  }
}
// 테스트 코드
console.log(mainObj.subObj1.data); // 방법1
console.log(mainObj['subObj2']['data']); // 방법2 (따옴표 없으면 변수)


7.

var myArray = { // 객체
  data: [],
  method1: function(a, i1, i2) { // 추가
    if (a instanceof Array) { // 추가 대상이 배열인 경우
      this.data.push(a);
    } else { // 추가 대상이 배열이 아닌 경우
      if (i1 == undefined) { // 인덱스를 입력 안한경우
        throw new Error("Myarray.method1(a, i1, i2): Wrong Input")
      } else if ( this.data[i1] == undefined ) { // i1인덱스 잘못된경우 에러처리
        throw new Error("Myarray.method1(a, i1, i2): i1 index is not exist")
      } else { // 추가 대상이 원소 하나인경우 해당 위치에 입력(또는 대체)
        this.data[i1][i2] = a;
      }
    }
  },
  method2: function(i1, i2) { // 삭제
    if (i2 == undefined) { // i1만 입력
      this.data.splice(i1, 1); // i1번째 요소 삭제
    } else {
      this.data[i1].splice(i2, 1); // i1-i2 요소 삭제
    }
  },
  method3: function() { // 전체 반환
    return this.data;
  },
  method4: function(i) { // 특정 요소 반환
    return this.data[i];
  }
}

// 명령문
myArray.method1([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);
myArray.method1([10, 11, 12, 13, 14, 15, 16, 17, 18, 19]);
myArray.method1([20, 21, 22, 23, 24, 25, 26, 27, 28, 29]);
myArray.method1("I'm 25", 2, 5);
myArray.method4(2); // [20, 21, 22, 23, 24, "I'm 25", 26, 27, 28, 29]
myArray.method2(0, 9);
myArray.method4(0); // [0, 1, 2, 3, 4, 5, 6, 7, 8]
myArray.method2(0); // 0~9 삭제
myArray.method2(1); // 20~29 삭제
myArray.method3(); // [10, 11, 12, 13, 14, 15, 16, 17, 18, 19]



8.

function MyArray() { // 생성자
  this.data = [];
  this.method1 = function(a, i1, i2) { // 추가
    if (a instanceof Array) { // 추가 대상이 배열인 경우
      this.data.push(a);
    } else { // 추가 대상이 배열이 아닌 경우
      if (i1 == undefined) { // 인덱스를 입력 안한경우
        throw new Error("Myarray.method1(a, i1, i2): Wrong Input")
      } else if ( this.data[i1] == undefined ) { // i1인덱스 잘못된경우 에러처리
        throw new Error("Myarray.method1(a, i1, i2): i1 index is not exist")
      } else { // 추가 대상이 원소 하나인경우 해당 위치에 입력(또는 대체)
        this.data[i1][i2] = a;
      }
    }
  };
  this.method2 = function(i1, i2) { // 삭제
    if (i2 == undefined) { // i1만 입력
      this.data.splice(i1, 1); // i1번째 요소 삭제
    } else {
      this.data[i1].splice(i2, 1); // i1-i2 요소 삭제
    }
  };
  this.method3 = function() { // 전체 반환
    return this.data;
  };
  this.method4 = function(i) { // 특정 요소 반환
    return this.data[i];
  }
}

var myArray = new MyArray(); // 객체 생성

// 명령문
myArray.method1([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);
myArray.method1([10, 11, 12, 13, 14, 15, 16, 17, 18, 19]);
myArray.method1([20, 21, 22, 23, 24, 25, 26, 27, 28, 29]);
myArray.method1("I'm 25", 2, 5);
myArray.method4(2); // [20, 21, 22, 23, 24, "I'm 25", 26, 27, 28, 29]
myArray.method2(0, 9);
myArray.method4(0); // [0, 1, 2, 3, 4, 5, 6, 7, 8]
myArray.method2(0); // 0~9 삭제
myArray.method2(1); // 20~29 삭제
myArray.method3(); // [10, 11, 12, 13, 14, 15, 16, 17, 18, 19]


9.

//1)
function MyArray() { // 생성자
  //private data
  var data =[];

  function method1(a, i1, i2) { // 추가
    if (a instanceof Array) { // 추가 대상이 배열인 경우
      data.push(a);
    } else { // 추가 대상이 배열이 아닌 경우
      if (i1 == undefined) { // 인덱스를 입력 안한경우
        throw new Error("Myarray.method1(a, i1, i2): Wrong Input")
      } else if ( data[i1] == undefined ) { // i1인덱스 잘못된경우 에러처리
        throw new Error("Myarray.method1(a, i1, i2): i1 index is not exist")
      } else { // 추가 대상이 원소 하나인경우 해당 위치에 입력(또는 대체)
        data[i1][i2] = a;
      }
    }
  };
  function method2(i1, i2) { // 삭제
    if (i2 == undefined) { // i1만 입력
      data.splice(i1, 1); // i1번째 요소 삭제
    } else {
      data[i1].splice(i2, 1); // i1-i2 요소 삭제
    }
  };
  function method3() { // 전체 반환
    return data;
  };
  function method4(i) { // 특정 요소 반환
    return data[i];
  };
  return { // 클로저를 통한 public 메소드
    a_add: method1,
    a_del: method2,
    a_displayAll: method3,
    a_display: method4
  }
}

myArray = new MyArray();

// 명령문
myArray.a_add([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);
myArray.a_add([10, 11, 12, 13, 14, 15, 16, 17, 18, 19]);
myArray.a_add([20, 21, 22, 23, 24, 25, 26, 27, 28, 29]);
myArray.a_add("I'm 25", 2, 5);
myArray.a_display(2); // [20, 21, 22, 23, 24, "I'm 25", 26, 27, 28, 29]
myArray.a_del(0, 9);
myArray.a_display(0); // [0, 1, 2, 3, 4, 5, 6, 7, 8]
myArray.a_del(0); // 0~9 삭제
myArray.a_del(1); // 20~29 삭제
myArray.a_displayAll(); // [10, 11, 12, 13, 14, 15, 16, 17, 18, 19]



10.
var set = [
          {item:"pencil", up: 100, qty: 9},
          {item:"eraser", up: 200, qty: 7},
          {item:"notebook", up: 500, qty: 3},
          {item:"compass", up: 300, qty: 2}
        ];

function Product(_up, _qty){ // 생성자
  this.up = _up,
  this.qty = _qty
};

Product.prototype.calc = function(){ // 한 물건의 총 금액 구하는 메소드
  return (this.up * this.qty);
};

var p = new Product(); // 객체생성
var sum = 0;
for (i in set) {
  sum += p.calc.apply(set[i]);
}
console.log("Toal: " + sum); // 4400
